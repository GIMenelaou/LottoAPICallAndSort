/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg3hge;

import java.awt.Color;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import modular.OpapJokerDraws;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import java.util.Date;
import java.util.List;

/**
 *
 * @author Giorg
 */
public class StatisticsGraphic extends javax.swing.JFrame {

    
    
    
     
        OpapJokerDraws draw;
     
            
           LastResultPull singledate = new LastResultPull();         //pull information from api
           SaveCompare saved = new SaveCompare();
           DeleteDraw deleted = new DeleteDraw();
           DrawbyDate muldates = new DrawbyDate();
           EntityManagerFactory emf = Persistence.createEntityManagerFactory("3hGEPU");
           EntityManager em = emf.createEntityManager();
           int[] regnum = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
           int[] joknum = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
           List<OpapJokerDraws>  result;
  
    public StatisticsGraphic() {
        initComponents();
        this.getContentPane().setBackground(new Color(0x123456));
        ImageIcon image = new ImageIcon("src/opap.jpg");
        this.setIconImage(image.getImage());
       this.setLocationRelativeTo(null);
       
       

       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Τα στοιχεία που παρουσιάζονται είναι ΜΟΝΟ για ό,τι έχετε αποθηκεύσει.");

        jButton1.setText("Συχνότητα εμφάνισης αριθμών στήλης");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Συχνότητα εμφάνισης αριθμών joker");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Μέσος όρος κέρδους ανα κατηγορία");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Από");

        jLabel4.setText("Εώς");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ucs.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(791, 791, 791)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addComponent(jLabel4))
                        .addComponent(jDateChooser3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 
        
       SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
               
               
               
               Date sd = jDateChooser2.getDate();
               
               
               Date ed = jDateChooser3.getDate();
               
               
         
               
               Query attempt = em.createQuery("SELECT o FROM OpapJokerDraws o WHERE o.drawtime >= :start AND o.drawtime <= :end");
               attempt.setParameter("start", sd);
               attempt.setParameter("end", ed);
               
       
                 result = (List<OpapJokerDraws> ) attempt.getResultList();
       
                   em.close();
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
                     result.forEach((draw) -> {
                         
                         
                         
                         
                         
                         
                         
                         String[] numberArr = draw.getWinnningnumbers().split(",");
                            
                            for (int i=0; i<numberArr.length; i++)
                            {
                                regnum[Integer.parseInt(numberArr[i])]++;
                                System.out.println(numberArr[i]);
                            }
                         
                         
                               });
               
               
               
            
        
               
                 int max=-1;
                  int pos=-1;
        
        for (int i =0; i<regnum.length; i++){
        
        
            if (Math.max(max,regnum[i])> max){
            pos = i+1;
           
        
            }
        
        max = Math.max(max,regnum[i]);
                    }
        
        System.out.println(pos);
        
        regnum[pos-1] = -1; 
        max =-1;
        pos =-1;
        
        for (int i =0; i<regnum.length; i++){
        
        
        
            if (Math.max(max,regnum[i])> max){
            pos = i+1;          
        
            }
        
         max = Math.max(max,regnum[i]);
             }
          System.out.println(pos);
          
          
           regnum[pos-1] = -1; 
            max =-1;
              pos =-1;
        
          
          
        for (int i =0; i<regnum.length; i++){
        
        
        
        if (Math.max(max,regnum[i])> max){
            pos = i+1;
         }
        
          max = Math.max(max,regnum[i]);
            }
        
        System.out.println(pos);

        regnum[pos-1] = -1;

        max =-1;
        pos =-1;
        
        for (int i =0; i<regnum.length; i++){
        
        
        
        if (Math.max(max,regnum[i])> max){
            pos = i+1;
           
       
        
        }
        
        max = Math.max(max,regnum[i]);
        }
        
        System.out.println(pos);
        
        regnum[pos-1] = -1;
         
        max =-1;
        pos =-1;
        
        
        for (int i =0; i<regnum.length; i++){
        
        
        
        if (Math.max(max,regnum[i])> max){
            pos = i+1;
           
       
        
        }
        
        max = Math.max(max,regnum[i]);
        }
        
        System.out.println(pos);
        
     
               
        
        
        
               
               
               
               
               
               
               
               
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
        
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
               
               
               
               Date sd = jDateChooser2.getDate();
               
               
               Date ed = jDateChooser3.getDate();
               
               
         
               
               Query attempt = em.createQuery("SELECT o FROM OpapJokerDraws o WHERE o.drawtime >= :start AND o.drawtime <= :end");
               attempt.setParameter("start", sd);
               attempt.setParameter("end", ed);
               
       
                 result = (List<OpapJokerDraws> ) attempt.getResultList();
       
                   em.close();
        
        
        
        
        
        
        
        
          result.forEach((draw) -> {
                         
                                
                
                          joknum[draw.getBonusnumber()-1]++;
                          

                          
                               });
                         
       /* for (int i=0; i<joknum.length; i++)
        {System.out.println(joknum[i]);}*/
        
          
        
                 int max=-1;
                 int pos=-1;
        
                 
        for (int i =0; i<joknum.length; i++){
        
        
            if (Math.max(max,joknum[i])> max){
            pos = i+1;
           
        
            }
        
        max = Math.max(max,joknum[i]);
                    }
        
        System.out.println(pos);
        
        joknum[pos-1] = -1; 
        max =-1;
        pos =-1;
        
        for (int i =0; i<joknum.length; i++){
        
        
        
            if (Math.max(max,joknum[i])> max){
            pos = i+1;          
        
            }
        
         max = Math.max(max,joknum[i]);
             }
          System.out.println(pos);
          
          
           joknum[pos-1] = -1; 
            max =-1;
              pos =-1;
        
          
          
        for (int i =0; i<joknum.length; i++){
        
        
        
        if (Math.max(max,joknum[i])> max){
            pos = i+1;
         }
        
          max = Math.max(max,joknum[i]);
            }
        
        System.out.println(pos);

        joknum[pos-1] = -1;

        max =-1;
        pos =-1;
        
        for (int i =0; i<joknum.length; i++){
        
        
        
        if (Math.max(max,joknum[i])> max){
            pos = i+1;
           
       
        
        }
        
        max = Math.max(max,joknum[i]);
        }
        
        System.out.println(pos);
        
        joknum[pos-1] = -1;
         
        max =-1;
        pos =-1;
        
        
        for (int i =0; i<joknum.length; i++){
        
        
        
        if (Math.max(max,joknum[i])> max){
            pos = i+1;
           
       
        
        }
        
        max = Math.max(max,joknum[i]);
        }
        
        System.out.println(pos);
        
     
               

        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
               
               
               
               Date sd = jDateChooser2.getDate();
               
               
               Date ed = jDateChooser3.getDate();
               
               
         
               
               Query attempt = em.createQuery("SELECT o FROM OpapJokerDraws o WHERE o.drawtime >= :start AND o.drawtime <= :end");
               attempt.setParameter("start", sd);
               attempt.setParameter("end", ed);
               
       
                 result = (List<OpapJokerDraws> ) attempt.getResultList();
       
                   em.close();
        
        
        
        
        
        
        StatisticsInfo pnl = new StatisticsInfo();
        
        pnl.setVisible(true);
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsGraphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsGraphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsGraphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsGraphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsGraphic().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
