/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg3hge;

import java.awt.Color;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import modular.OpapJokerDraws;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Giorg
 */
public class InfoByMonth extends javax.swing.JFrame {
    
            OpapJokerDraws draw;
     
            
           LastResultPull singledate = new LastResultPull();         //pull information from api
           SaveCompare saved = new SaveCompare();
           DeleteDraw deleted = new DeleteDraw();
           DrawbyDate muldates = new DrawbyDate();
           ArrayList<OpapJokerDraws> muldraw;
           EntityManagerFactory emf = Persistence.createEntityManagerFactory("3hGEPU");
           EntityManager em = emf.createEntityManager();
            int barprog = 0;

    /**
     * Creates new form InfoByMonth
     */
    public InfoByMonth() {
        initComponents();
           this.getContentPane().setBackground(new Color(0x123456));
         ImageIcon image = new ImageIcon("src/opap.jpg");
          this.setIconImage(image.getImage());
          this.setLocationRelativeTo(null);
          jButton2.setVisible(false);
          jLabel3.setVisible(true);

              
                 
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Μήνας");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Έτος");

        jTable1.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Συνολικά Παιχνίδια", "Διανεμημένα Χρήματα", "ΤΖΑΚ-ΠΟΤ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Προβολή");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(0, 0, 0));
        jTextField1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setToolTipText("");
        jTextField1.setBorder(null);
        jTextField1.setOpaque(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(0, 0, 0));
        jTextField2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setToolTipText("");
        jTextField2.setBorder(null);
        jTextField2.setOpaque(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Πίσω");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Θα υπάρξει μια μικρή καθυστέρηση, απολύτως φυσιολογική!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(126, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jButton2)))
                        .addGap(336, 336, 336))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(203, 203, 203))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(97, 97, 97))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        String cbtext = jTextField1.getText();
        String mtext = jTextField2.getText();
        
      
                
                
                
                
                
                
                
       jButton1.setVisible(false);
        jButton2.setVisible(true);
        jLabel3.setVisible(true);
        
        String jan = (cbtext +"-01-"+"01");
        String jan1 = (cbtext +"-01-"+"31"); 
        String mar = (cbtext +"-03-"+"01");
        String mar1 = (cbtext +"-03-"+"31");
        String apr = (cbtext +"-04-"+"01");
        String apr1 = (cbtext +"-04-"+"30");
        String may = (cbtext +"-05-"+"01");
        String may1 = (cbtext +"-05-"+"31");
        String jun = (cbtext +"-06-"+"01");
        String jun1 = (cbtext +"-06-"+"30");
        String jul = (cbtext +"-07-"+"01");
        String jul1 = (cbtext +"-07-"+"31");
        String aug = (cbtext +"-08-"+"01");
        String aug1 = (cbtext +"-08-"+"31");
        String sep = (cbtext +"-09-"+"01");
        String sep1 = (cbtext +"-09-"+"30");
        String oct = (cbtext +"-10-"+"01");
        String oct1 = (cbtext +"-10-"+"31");
        String nov = (cbtext +"-11-"+"01");
        String nov1 = (cbtext +"-11-"+"30");
        String dec = (cbtext +"-12-"+"01");
        String dec1 = (cbtext +"-12-"+"31");
         
        
                DecimalFormat df = new DecimalFormat("#");
                  df.setMaximumFractionDigits(8);
        int monthdraws = 0;
        
        String start;
        String end;  
        
        String feb1;
        int totaljacks =0;
        double[] winar = new double[8];
        double[] distribs = new double[8];
        
        double totalsum = 0;
        double totalset;
       
         DefaultTableModel tblMod = (DefaultTableModel)jTable1.getModel();
        
        String feb = (cbtext +"-02-01");
        
               if (cbtext.equals("2000") || cbtext.equals("2004") || cbtext.equals("2008") || cbtext.equals("2012")|| cbtext.equals("2016")|| cbtext.equals("2020") ) {
            
           
                   feb1 = (cbtext +"-02-29");//FEBRUARY SPECIAL DATES ON TOP OF EVERYTHING....
            
        }
        else 
        { 
            feb1 = (cbtext +"-02-28");
   
        
        }
               
        
              
                
               
//               jProgressBar1.setVisible(true);
        
                   switch (mtext) {
                
                case "Ιανουάριος":
                     try {
                        
            muldraw =   muldates.DrawbyDate(jan, jan1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
                       
                    
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                /*  while (barprog <=100){
                          jProgressBar1.setValue(barprog);
                  /   try {
                           
                           Thread.sleep(10000);
                           
                   
                       
                   } catch (InterruptedException ex) {
                Logger.getLogger(InfoByMonth.class.getName()).log(Level.SEVERE, null, ex);
            }
                       barprog+=1;
                    
                   }
                            */
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
              
                  
                    break;
                    
                    
                case "Φεβρουάριος":

                     try {
                        
            muldraw =   muldates.DrawbyDate(feb, feb1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
        
                         
                      break;
                      
                      
                case "Μάρτιος":
                    

                    try {
                        
            muldraw =   muldates.DrawbyDate(mar, mar1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                 
                    
                      break;
                case "Απρίλιος":
                    
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(may, may1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                   
                    
                      break;
                    
                case "Μάιος":
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(mar, mar1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                   
                      break;
                case "Ιούνιος":
                    
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(jun, jun1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                   
                      break;
                      
                case "Ιούλιος":
                    
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(jul, jul1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                   
                    
                      break;
                case "Αύγουστος":
                    
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(aug, aug1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
               
                      break;
                    
                case "Σεπτέμβριος":
                    
                    
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(sep, sep1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                  
                      break;
                    
                case "Οκτώβριος":
                  
                    
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(oct, oct1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                      break;
                case "Νοέμβριος":
                    


                    try {
                        
            muldraw =   muldates.DrawbyDate(nov, nov1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                  
                      break;
                case "Δεκέμβριος":
                     

                    try {
                        
            muldraw =   muldates.DrawbyDate(dec, dec1, 5104);
         
             for (OpapJokerDraws datedraw : muldraw) {
                 
            
                 
                  monthdraws = monthdraws+1;
                  
                  
             
                
                  
      try {
            draw = singledate.DrawByID(datedraw.getDrawid(), 5104); 
            
             String[] winnerArray = draw.getCountwinners().split(",");
             String[] dividentsArray = draw.getDivident().split(",");
         
          
             for(int i =0 ;i < 8 ;i++)
                    {
   
                winar[i] = Double.parseDouble(winnerArray[i]);
                distribs[i] =Double.parseDouble(dividentsArray[i]);  
                       
                            }
                                                                                                           
                if (winar[0] == 0 ){
                    
                    
                } else {
                 totaljacks = totaljacks+1;
                }
                
                for (int i=0; i<8; i++)
                {
                     
                    
                     totalset = winar[i] * distribs[i];
                     totalsum += totalset;
                  
                }

             
            
      } 
      
      

                catch (ParseException | IOException ex) {
                      Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
                                       }
                  
                        
                     } 
              
                catch (ParseException | IOException ex) {
            Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                         }
                   
         

                    
                   
                    
                            
                  tblMod.addRow(new Object[]{monthdraws, df.format(totalsum), totaljacks});  
      
                    
                
                
                      break;
                
                default: System.out.println("nope");
                
            }
        
        
        
        
        
        
        
 
        
        
        
        
        
        
        
     
        
        
         jLabel3.setVisible(false);
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
        this.dispose();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InfoByMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InfoByMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InfoByMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InfoByMonth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InfoByMonth().setVisible(true);
            }
        });
    }
    
    
    
   /* public String getdrawmonth(String month){
        
      
        
        
        
       return mtext; 
    }
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
